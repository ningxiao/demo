{"version":3,"sources":["~lib/rt/common.ts","assembly/module.ts"],"names":[],"mappings":"2PCQI,AAAO,EAAI,GAAI,MAIf,AAAO,EAAI,MAGX,AAA8B,EAAG,cAGjC,SAUqB,OAAI,KAKrB,AAAW,AAJC,EAAK,UAID,AAAe,AAFH,KAEZ,MALS,WAQ7B,AAAiB,AAAC,EAAQ,GAAM","sourceRoot":"./module.optimized.wasm","sourcesContent":["// Alignment guarantees\n\n// @ts-ignore: decorator\n@inline export const AL_BITS: u32 = 4; // 16 bytes to fit up to v128\n// @ts-ignore: decorator\n@inline export const AL_SIZE: usize = 1 << <usize>AL_BITS;\n// @ts-ignore: decorator\n@inline export const AL_MASK: usize = AL_SIZE - 1;\n\n// Extra debugging\n\n// @ts-ignore: decorator\n@inline export const DEBUG = true;\n// @ts-ignore: decorator\n@inline export const TRACE = false;\n// @ts-ignore: decorator\n@inline export const RTRACE = isDefined(ASC_RTRACE);\n// @ts-ignore: decorator\n@inline export const PROFILE = isDefined(ASC_PROFILE);\n\n// Memory manager\n\n// ╒════════════ Memory manager block layout (32-bit) ═════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                           MM info                             │ -4\n// ╞>ptr═══════════════════════════════════════════════════════════╡\n// │                              ...                              │\n@unmanaged export class BLOCK {\n  /** Memory manager info. */\n  mmInfo: usize;\n}\n\n/** Overhead of a memory manager block. */\n// @ts-ignore: decorator\n@inline export const BLOCK_OVERHEAD: usize = offsetof<BLOCK>();\n\n/** Maximum size of a memory manager block's payload. */\n// @ts-ignore: decorator\n@inline export const BLOCK_MAXSIZE: usize = (1 << 30) - BLOCK_OVERHEAD;\n\n// Garbage collector\n\n// ╒══════════ Garbage collector object layout (32-bit) ═══════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                     Memory manager block                      │ -20\n// ╞═══════════════════════════════════════════════════════════════╡\n// │                            GC info                            │ -16\n// ├───────────────────────────────────────────────────────────────┤\n// │                            GC info                            │ -12\n// ├───────────────────────────────────────────────────────────────┤\n// │                            RT id                              │ -8\n// ├───────────────────────────────────────────────────────────────┤\n// │                            RT size                            │ -4\n// ╞>ptr═══════════════════════════════════════════════════════════╡\n// │                              ...                              │\n@unmanaged export class OBJECT extends BLOCK {\n  /** Garbage collector info. */\n  gcInfo: u32;\n  /** Garbage collector info. */\n  gcInfo2: u32;\n  /** Runtime class id. */\n  rtId: u32;\n  /** Runtime object size. */\n  rtSize: u32;\n}\n\n/** Overhead of a garbage collector object. Excludes memory manager block overhead. */\n// @ts-ignore: decorator\n@inline export const OBJECT_OVERHEAD: usize = (offsetof<OBJECT>() - BLOCK_OVERHEAD + AL_MASK) & ~AL_MASK;\n\n/** Maximum size of a garbage collector object's payload. */\n// @ts-ignore: decorator\n@inline export const OBJECT_MAXSIZE: usize = BLOCK_MAXSIZE - OBJECT_OVERHEAD;\n\n/** Total of memory manager and garbage collector overhead. */\n// @ts-ignore: decorator\n@inline export const TOTAL_OVERHEAD: usize = BLOCK_OVERHEAD + OBJECT_OVERHEAD;\n","const ADD_CONSTANT: i32 = 1;\nconst SUM_CONSTANT: u16 = 12;\nconst TEST_CONSTANT: u8 = 12;\ndeclare function sayHello(num: number): void;\ndeclare function consoleLog(arg0: number): void;\nconsoleLog(Math.random());\nsayHello(12);\nconst addIntegerWithConstant = (a: i32, b: i32): i32 => {\n    return a + b + ADD_CONSTANT;\n}\nexport const GET_THIS_CONSTANT_FROM_JAVASCRIPT: i32 = 2424;\nexport function add(a: i32, b: i32): i32 {\n    return a + b;\n}\nexport function callMeFromJavascript(a: i32, b: i32): i32 {\n    return addIntegerWithConstant(a, b);\n}\nexport function getGlobal(): i64 {\n    return 42;\n}\n/**\n * 写入内存最小8位\n * 16位移2格 index<<1;\n * 32位移4格 index<<2;\n * 对像素进行加工然后返回数据\n */\nexport function calculation(index: u16): u16 {\n    // 填充数据\n    for (let i: u16 = 0; i < 10; i++) {\n        const ptr = i << 1;\n        // 获取内存数据\n        const data: u16 = load<u16>(ptr);\n        // 写入内存数据\n        store<u16>(ptr, SUM_CONSTANT + data);\n    }\n    // 获取知道索引数据\n    return load<u16>((index - 1) << 1);\n}\n"]}