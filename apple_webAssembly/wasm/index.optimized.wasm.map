{"version":3,"sources":["~lib/rt/common.ts","~lib/shared/typeinfo.ts","assembly/index.ts"],"names":[],"mappings":"uLEyBQ,IACA,IACA,EAAQ,KAEC,QAAG,EAAI,KACH,QAAG,EAAI,KACN,EAAgB,YAAM,EAAW,OAAa,EAAY,SAhBjE,AAAC,EAAI,AAAI,EAAJ,IAAQ,GAAM,GAAG,KAeJ,WADJ,iBAQb,EAAI,KACJ,EAAI,SAGA,EAAI,KACS,EAAI,GAAV,EAAT,KACW,EAAI,EAAI,GAAnB,EAAK,MACF,QAAG,EAAI,KAMZ,AAAC,AALoB,EAAI,GAAV,EAAT,iBAKW,GAAM,cAAc,IAAM,AAJrC,AAAW,EAAI,EAAI,GAAnB,EAAK,kBAIgD,IAC1D,cAAc,IAAM,cAAc,IAClC,cAAgB,IAAM,cAAc,IAAM,cAAgB,MAG3D,AADO,AA5CF,AAAC,AAAI,EAAJ,GAAQ,GAAM,QA6Cb,KAEH,AAAC,EAAiB,GAAW,mEAGnB,EAAW,WAIrB,EAAkB,mBACR,EAAY,UAlD3B,AAAC,EAAI,AAAI,EAAJ,IAAQ,GAAM,GAAG,AAMV,EAAI,MAAhB,AADQ,AAAC,EAAM,GAAM,aAChB,SAuBa,WAHJ,oBAkCR,EAAK,KACd,EAAgB,mBAAc,EAAY,UADvB,WAGb,QAAG,EAAK,KACd,EAAgB,KAhEb,AAAC,EAAI,AAAI,EAAJ,IAAQ,GAAM,GAAG,AAgEK,EAAY,UADvB","sourceRoot":"./index.optimized.wasm","sourcesContent":["// Alignment guarantees\n\n// @ts-ignore: decorator\n@inline export const AL_BITS: u32 = 4; // 16 bytes to fit up to v128\n// @ts-ignore: decorator\n@inline export const AL_SIZE: usize = 1 << <usize>AL_BITS;\n// @ts-ignore: decorator\n@inline export const AL_MASK: usize = AL_SIZE - 1;\n\n// Extra debugging\n\n// @ts-ignore: decorator\n@inline export const DEBUG = true;\n\n// ╒════════════════ Common block layout (32-bit) ═════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                           MM info                             │ -16\n// ├───────────────────────────────────────────────────────────────┤\n// │                           GC info                             │ -12\n// ├───────────────────────────────────────────────────────────────┤\n// │                          runtime id                           │ -8\n// ├───────────────────────────────────────────────────────────────┤\n// │                         runtime size                          │ -4\n// ╞═══════════════════════════════════════════════════════════════╡\n// │                              ...                              │ ref\n@unmanaged export class BLOCK {\n  /** Memory manager info. */\n  mmInfo: usize; // WASM64 needs adaption\n  /** Garbage collector info. */\n  gcInfo: u32;\n  /** Runtime class id. */\n  rtId: u32;\n  /** Runtime object size. */\n  rtSize: u32;\n}\n\n// @ts-ignore: decorator\n@inline export const BLOCK_OVERHEAD = (offsetof<BLOCK>() + AL_MASK) & ~AL_MASK;\n\n// @ts-ignore: decorator\n@inline export const BLOCK_MAXSIZE: usize = (1 << 30) - BLOCK_OVERHEAD;\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","// see: https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\n\n// Configuration imported from JS\nimport { BGR_ALIVE, BGR_DEAD, BIT_ROT } from \"./config\";\nlet w: i32;\nlet h: i32;\nlet s: i32;\n/** Gets an input pixel in the range [0, s]. */\n@inline\nfunction get(x: u32, y: u32): u32 {\n    return load<u32>((y * w + x) << 2);\n}\n/** Sets an output pixel in the range [s, 2*s]. */\n@inline\nfunction set(x: u32, y: u32, v: u32): void {\n    store<u32>((s + y * w + x) << 2, v);\n}\n/** Sets an output pixel in the range [s, 2*s] while fading it out. */\n@inline\nfunction rot(x: u32, y: u32, v: u32): void {\n    const a = max<i32>((v >>> 24) - BIT_ROT, 0);\n    set(x, y, (a << 24) | (v & 0x00ffffff));\n}\n/** Initializes width and height. Called once from JS. */\nexport function init(width: i32, height: i32): void {\n    w = width;\n    h = height;\n    s = width * height;\n    // Start by filling output with random live cells.\n    for (let y = 0; y < h; ++y) {\n        for (let x = 0; x < w; ++x) {\n            set(x, y, Math.random() > 0.1 ? BGR_DEAD & 0x00ffffff : BGR_ALIVE | 0xff000000);\n        }\n    }\n}\n/** Performs one step. Called about 30 times a second from JS. */\nexport function step(): void {\n    const hm1 = h - 1;// h - 1\n    const wm1 = w - 1; // w - 1\n    // The universe of the Game of Life is an infinite two-dimensional orthogonal grid of square\n    // \"cells\", each of which is in one of two possible states, alive or dead.\n    for (let y = 0; y < h; ++y) {\n        let ym1 = y == 0 ? hm1 : y - 1;\n        let yp1 = y == hm1 ? 0 : y + 1;\n        for (let x = 0; x < w; ++x) {\n            let xm1 = x == 0 ? wm1 : x - 1;\n            let xp1 = x == wm1 ? 0 : x + 1;\n            // Every cell interacts with its eight neighbours, which are the cells that are horizontally,\n            // vertically, or diagonally adjacent. Least significant bit indicates alive or dead.\n            let aliveNeighbors = (\n                (get(xm1, ym1) & 1) + (get(x, ym1) & 1) + (get(xp1, ym1) & 1) +\n                (get(xm1, y) & 1) + (get(xp1, y) & 1) +\n                (get(xm1, yp1) & 1) + (get(x, yp1) & 1) + (get(xp1, yp1) & 1)\n            );\n            let self = get(x, y);\n            if (self & 1) {\n                // A live cell with 2 or 3 live neighbors rots on to the next generation.\n                if ((aliveNeighbors & 0b1110) == 0b0010) {\n                    rot(x, y, self);\n                } else {// A live cell with fewer than 2 or more than 3 live neighbors dies.\n                    set(x, y, BGR_DEAD | 0xff000000);\n                }\n            } else {\n                // A dead cell with exactly 3 live neighbors becomes a live cell.\n                if (aliveNeighbors == 3) {\n                    set(x, y, BGR_ALIVE | 0xff000000);\n                } else { // A dead cell with fewer or more than 3 live neighbors just rots.\n                    rot(x, y, self);\n                }\n            }\n        }\n    }\n}\n/** Fills the row and column indicated by `x` and `y` with random live cells. */\nexport function fill(x: u32, y: u32, p: f64): void {\n    for (let ix = 0; ix < w; ++ix) {\n        if (Math.random() < p) set(ix, y, BGR_ALIVE | 0xff000000);\n    }\n    for (let iy = 0; iy < h; ++iy) {\n        if (Math.random() < p) set(x, iy, BGR_ALIVE | 0xff000000);\n    }\n}\n"]}